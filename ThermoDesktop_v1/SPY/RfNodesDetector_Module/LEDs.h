///////////////////////////////////////////////////////////////////////////////
//!
//! \file LEDs.h
//!
//! \brief 
//! Function and definition for control GPIO
//!
//! \author
//!
////////////////////////////////////////////////////////////////////////////////
#ifndef _LEDS_H_
#define _LEDS_H_

#include <iostm8s105c6.h>
#include "types.h"

////////////////////////////////////////////////////////////////////////////////
// Macro definitions
////////////////////////////////////////////////////////////////////////////////
#define LED1_ON        LedSet(LED1, TRUE)  //PE_ODR_ODR7 = 1
#define LED1_OFF       LedSet(LED1, FALSE) //PE_ODR_ODR7 = 0
#define LED2_ON        LedSet(LED2, TRUE)  //PE_ODR_ODR6 = 1
#define LED2_OFF       LedSet(LED2, FALSE) //PE_ODR_ODR6 = 0
#define LED3_ON        LedSet(LED3, TRUE)  //PE_ODR_ODR5 = 1
#define LED3_OFF       LedSet(LED3, FALSE) //PE_ODR_ODR5 = 0
#define LED4_ON        LedSet(LED4, TRUE)  //PC_ODR_ODR1 = 1
#define LED4_OFF       LedSet(LED4, FALSE) //PC_ODR_ODR1 = 0

////////////////////////////////////////////////////////////////////////////////
typedef enum
{
  LED1 = 0,
  LED2 = 1,
  LED3 = 2,
  LED4 = 3
}
LEDn;

typedef enum
{
  LED_MODE_CONSTANT = 0,
  LED_MODE_BLINKY = 1,
  LED_MODE_N      = 2,
  LED_MODE_PULSE  = 3
}
LED_MODE;

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//! 
//! \brief Prepare needed port for work. All the necessary settings are made inside
//!  
////////////////////////////////////////////////////////////////////////////////
void vLedsInit(void);

////////////////////////////////////////////////////////////////////////////////
//! 
//! \brief Set LED_MODE_CONSTANT for LEDn
//!  
//! \param ucLed   - LEDn
//!        bState  - TRUE is ON, FALSE is OFF
//!  
////////////////////////////////////////////////////////////////////////////////
void LedSet(LEDn ucLed, BOOL bState);

////////////////////////////////////////////////////////////////////////////////
//! 
//! \brief Set LED_MODE_BLINKY for LEDn
//!  
//! \param ucLed   - LEDn
//!        ucTon_  - number of 100 ms to be in ON state
//!        ucToff_ - number of 100 ms to be in OFF state
//!  
////////////////////////////////////////////////////////////////////////////////
void LedSetBlinky(LEDn ucLed, UINT8 ucTon_, UINT8 ucToff_);

////////////////////////////////////////////////////////////////////////////////
//! 
//! \brief Set LED_MODE_N for LEDn
//!  
//! \param ucLed   - LEDn
//!        nCount  - flushes to do before go to OFF state
//!  
////////////////////////////////////////////////////////////////////////////////
void LedFlush(LEDn ucLed, UINT8 nCount);

////////////////////////////////////////////////////////////////////////////////
//! 
//! \brief Set LED_MODE_PULSE for LEDn
//!  
//! \param ucLed   - LEDn
//!        nCount  - flushes to do before go to OFF state
//!  
////////////////////////////////////////////////////////////////////////////////
void LedPulse(LEDn ucLed, UINT8 nCount);

#endif //_LEDS_H_

///////////////////////////////////////////////////////////////////////////////
//!
//! \file spi.h
//!
//! \brief 
//! Module for SPI interface, base level
//!
//! \author Dmitriy Vorobyov "dima@mcsys.by"
//!
////////////////////////////////////////////////////////////////////////////////

#ifndef SPI_BASE_LEVEL
#define SPI_BASE_LEVEL

#include "iostm8s105c6.h"
#include "types.h"

////////////////////////////////////////////////////////////////////////////////
// Macro definitions
////////////////////////////////////////////////////////////////////////////////

#define NSEL                                    PC_ODR
#define MASK_NSEL                               0x10 // NSEL pin


#define SPI_BIT_WRITE_DIRECTION                 0x80 // define write direction parameter for SPI

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//! 
//! \brief The initialization of SPI interface
//!
////////////////////////////////////////////////////////////////////////////////
void SPIInit(void);

////////////////////////////////////////////////////////////////////////////////
//!
//! \brief Transmit byte.
//!
//! \param cAddress - register address on the device (slave)
//! \param cData - data for transmission 
//!
////////////////////////////////////////////////////////////////////////////////
void SPITransmitByte(UINT8 cAddress, UINT8 cData);

////////////////////////////////////////////////////////////////////////////////
//!
//! \brief Receive byte.
//!
//! \param cAddress - register address on the device (slave)
//!
//! \return requested byte
//!
////////////////////////////////////////////////////////////////////////////////
char SPIReceiveByte(UINT8 cAddress);

////////////////////////////////////////////////////////////////////////////////
//!
//! \brief Receive the sequence of bytes since the address, 
//!		written in cAddress.
//!
//! \param pcData - array with the requested bytes
//! \param cSize - quantity of this bytes
//
////////////////////////////////////////////////////////////////////////////////
void SPIBurstReceive(UINT8 cAddress, UINT8 *pcData, UINT8 cSize);

////////////////////////////////////////////////////////////////////////////////
//!
//! \brief Transmit the sequence of bytes since the address, 
//!		written in cAddress.
//!
//! \param pcData - array with the bytes for transmission
//! \param cSize - quantity of this bytes
//!
////////////////////////////////////////////////////////////////////////////////
void SPIBurstTransmit(UINT8 cAddress, UINT8 *pcData, UINT8 cSize);

#endif //SPI_BASE_LEVEL
